{
    "rss": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\">\n        <channel>\n            <title>Lau de Bugs' Blog - dev</title>\n            <description>Chronicling my lessons as a developer</description>\n            <link>https://laudebugs.me/dev</link>\n            <atom:link href=\"https://www.laudebugs.me/api/rss?section=dev\" rel=\"self\" type=\"application/rss+xml\"/>\n            <language>en</language>\n            <lastBuildDate>Sat, 22 Oct 2022 17:36:13 GMT</lastBuildDate>\n            <copyright>All rights reserved 2022, Laurence B. Ininda</copyright>\n            <category>nx</category><category>monorepos</category><category>angular</category><category>rxjs</category><category>angular-material</category><category>theming</category><category>javascript</category><category>dynamic components</category><category>graphql</category><category>aws lambda</category><category>apollo</category><category>guides</category><category>eslint</category><category>prettier</category><category>commitlint</category><category>commitizen</category><category>husky</category><category>automation</category><category>standard version</category><category>github</category><category>api</category><category>database</category><category>express</category><category>typescript</category><category>lighthouse</category><category>node.js</category><category>python</category>\n            <image>\n                <url>https://www.laudebugs.me/icons/icon-128x128.png</url>\n                <title>Lau de Bugs' Blog - dev</title>\n                <link>https://laudebugs.me/dev</link>\n            </image>\n            \n            \n            <item>\n                <title>NX Tips: Managing TsConfig Compiler Options Paths when building multiple angular libraries</title>\n                <link>https://www.laudebugs.me/dev/nx-tips-managing-tsconfig-paths-with-multiple-angular-libraries</link>\n                <pubDate>2022-10-19T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/nx-tips-managing-tsconfig-paths-with-multiple-angular-libraries</guid>\n                <description>\n                    <![CDATA[ When building an angular library lib-a that depends on another angular library lib-b within an nx workspace, you may encounter an error like this: Error: Cannot find module 'lib-b' or its corresponding type declarations. We will see how to fix this error by updating the base tsConfig.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p>Working with NX allows one to develop publishable or local shared libraries for all the applications and libraries in the monorepo itself.</p>\n<p>One issue that one may encounter is when trying to build libraries that depend on other libraries within the same monorepo. Say for instance we are working in an nx workspace called <code>@boomerang</code> and within this workspace we have two angular <a href=\"https://nx.dev/more-concepts/buildable-and-publishable-libraries#buildable-libraries\">buildable libraries</a> called <code>@boomerang/common</code> and <code>@boomerang/utils</code>. Since these are Angular libraries, NX uses it&#39;s own wrapper around <code>ng-packagr</code> called <a href=\"https://nx.dev/packages/angular/executors/ng-packagr-lite\"><code>@nrwl/ng-packagr-lite</code></a>. </p>\n<Aside>\n\n<p>Note: When creating a new Angular library with <code>nx generate @nrwl/angular:library</code>, if the library is both buildable and publishable, i.e. you pass in the <code>--buildable</code> and <code>--publishable</code> flags, then nx uses <a href=\"https://nx.dev/packages/angular/executors/package\"><code>@nrwl/angular:library</code></a> to build the library.</p>\n</Aside>\n\n<p>If, say <code>@boomerang/common</code> imports <code>@boomerang/utils</code>, when trying to build <code>@boomerang/common</code>, an error I encountered looked like <code>TS2307: Cannot find module &#39;@boomerang/utils&#39; or its corresponding type declarations.</code></p>\n<p>When I looked into what was causing the issue, its seems like a small tweak to the <code>tsConfig.base.json</code> at the root of the workspace by adding the <code>@boomerang/utils</code> dist path to the <code>compilerOptions</code> <code>paths</code> fixes the import issue.</p>\n<pre><code class=\"language-diff\">{\n    &quot;compilerOptions&quot;: {\n        &quot;paths: {\n            &quot;@boomerang/common&quot;: [&quot;libs/common/src/index.ts&quot;],\n-             &quot;@boomerang/utils&quot;: [&quot;libs/utils/src/index.ts&quot;],\n+             &quot;@boomerang/utils&quot;: [\n+                 &quot;dist/libs/utils&quot;,\n+                 &quot;libs/utils/src/index.ts&quot;\n+             ]\n        }\n    }\n}\n</code></pre>\n<p>This solution was inspired by this <a href=\"https://github.com/nrwl/nx/issues/602#issuecomment-414051299\">comment on nx github issues</a> as well as this <a href=\"https://github.com/zack9433/poc-workspace/commit/7dfedf7fdaf852a64e3b55960ba0678438aedc64\">commit diff solution</a>. Both of these mention updating the package.json as well to use the npm scope, i.e. updating the <code>package.json</code> for <code>@boomerang/utils</code> to look like: </p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;@boomerang/utils&quot;\n}\n</code></pre>\n<p>However, this update doesn’t necessarily fix the build issue if your packages are not publishable. </p>\n<p>Happy Hacking!</p>\n<h3 id=\"resources-and-links\">Resources and Links</h3>\n<ul>\n<li><a href=\"https://nx.dev/more-concepts/buildable-and-publishable-libraries#publishable-and-buildable-nx-libraries\">Publishable and Buildable Nx Libraries</a></li>\n<li><a href=\"https://nx.dev/packages/angular/executors/ng-packagr-lite#@nrwl/angular:ng-packagr-lite\"><code>@nrwl/ng-packagr-lite</code> docs</a></li>\n<li><a href=\"https://www.notion.so/NX-Tips-Managing-TsConfig-Compiler-Options-Paths-when-building-multiple-angular-libraries-69a68018574242bb80bf27ee1ed0e60c\"><code>@nrwl/angular:library</code> docs</a></li>\n<li><a href=\"https://github.com/nrwl/nx/issues/602#issuecomment-414051299\">Github Comment with solution</a> </li>\n<li><a href=\"https://github.com/zack9433/poc-workspace/commit/7dfedf7fdaf852a64e3b55960ba0678438aedc64\">poc-workspace diff by zack9433 on github to show a solution</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/nx-tips-managing-tsconfig-paths-with-multiple-angular-libraries.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/nx-tips-managing-tsconfig-paths-with-multiple-angular-libraries.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@digital_helium?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Mikhail Abramkin</a> on <a href=\"https://unsplash.com/s/photos/construction-wallpaper?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>RxJs Pitfalls: Passing in a Observer's next function as a callback to pipe operators</title>\n                <link>https://www.laudebugs.me/dev/rxjx-pitfalls-passing-observer-next-to-pipe-able-operator</link>\n                <pubDate>2022-10-17T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/rxjx-pitfalls-passing-observer-next-to-pipe-able-operator</guid>\n                <description>\n                    <![CDATA[ When using RxJs operators, you can pass in a callback function as the next function of an Observer. A common pitfall is to pass in the next function of an Observer as a callback to an RxJs operator. This post explains why this may be a bad idea causing errors that may be hard to debug and how to avoid it.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p>When working with observable streams, often one uses <code>RxJs</code> operators to pipe into the stream (i.e. using <a href=\"https://rxjs.dev/guide/operators\">pipe-able operators</a>). Some of these operators take observers as an argument. An observer is an object that consumes values delivered by an observable and often implements one or more of the <code>next</code>, <code>error</code> and <code>complete</code> functions.</p>\n<p>The RxJs <code>Subject</code> is a type of observable that is also an observer. A common pattern I find myself implementing in several projects is defining a <code>Subject</code>, often also a <code>BehaviorSubject</code> which then holds different pieces of data to be consumed in differnt parts of an application. In order to pass data to the <code>Subject</code>, which is also an observer, we call the <code>.next</code> with the data the Subject should hold. A simple example would be while using the <a href=\"https://rxjs.dev/api/index/function/tap\"><code>tap</code> operator</a> to perform side effects in our observable stream.</p>\n<p>A common pitfall is then passing <code>Subject.next</code> directly as the argument to a pipeable operator. For instance, when using <code>tap</code>, calling <code>tap(new Subject().next)</code>.\nWe will see how this can cause unexpected errors that are may be hard to debug and how to avoid it.</p>\n<hr>\n<p>Suppose you have an RxJs subject that is keeping track of the value in an observable stream (say called <code>stream$</code>).</p>\n<pre><code class=\"language-tsx\">import { Subject, timer, take, tap } from &#39;rxjs&#39;\n\nconst stream$ = timer(0, 1000).pipe(take(5))\n</code></pre>\n<p>One way to pass the current value to the subject is using the <code>tap</code> operator that accepts an observer, i.e. an object containing the <code>next</code>, <code>error</code> and <code>complete</code> functions.</p>\n<p>If we only pass a callback function that logs out the current value in the observable stream, we would have something that looks like:</p>\n<pre><code class=\"language-tsx\">stream$.pipe(\n    tap(console.log)\n).subscribe()\n/*\n// Result would look like:\n0\n1\n2\n3\n4\n*/\n</code></pre>\n<p>If we have a subject called <code>_count</code> where we would like to keep track of the current value in the stream, the first instinct would be to replace <code>console.log</code> with <code>_count.next</code>:</p>\n<pre><code class=\"language-tsx\">const _count = new Subject&lt;number&gt;()\n\nstream$.pipe(\n    tap(_count.next)\n).subscribe()\n</code></pre>\n<p>However, you&#39;ll notice that the above implementation <strong>does not work</strong>, resulting in the error: <code>TypeError: _this._throwIfClosed is not a function</code>.</p>\n<p>The reason being that RxJs&#39;s <code>Subject</code> is a class whose <code>next</code> implementation relies on <code>this</code> keyword which refers to the <code>_count</code> instance. You can <a href=\"https://github.com/ReactiveX/rxjs/blob/8.x/src/internal/Subject.ts#L60\">view the source code here</a>. Passing just the <code>_count.next</code> function would reference <code>this</code> which refers to the global scope and not the <code>_count</code> instance.</p>\n<p>We can see this in action by implementing our own observer that references <code>this</code>:</p>\n<pre><code class=\"language-tsx\">const observerStore = {\n    store: new Array&lt;number&gt;(),\n    next(value: number) {\n        this.store.push(value)\n    },\n}\n/* Replacing the _count with our observer would then look like below👇🏻 */\nstream$.pipe(\n    tap(observerStore.next)\n).subscribe()\n</code></pre>\n<p>The implementation above would also give us an error: <code>TypeError: Cannot read properties of undefined (reading &#39;push&#39;)</code>. For the same reason that the <code>this</code> reference would refer to the <code>global</code> object and not the <code>observerStore</code> object.</p>\n<Aside>\n\n<p>It&#39;s worth noting that if the observer&#39;s <code>next</code> implementation does not reference the <code>this</code> keyword, then passing in the <code>.next</code> function would work as expected.</p>\n</Aside>\n\n<p>For instance, if our <code>observerStore</code>&#39;s <code>next</code> function just logged out the value, then passing in the <code>observerStore.next</code> to <code>tap</code> would work as expected since the <code>next</code> function does not reference <code>this</code>:</p>\n<pre><code class=\"language-tsx\">const observerStore = {\n    store: new Array&lt;number&gt;(),\n    next(value: number) {\n        console.log(value)\n    },\n}\n\n/* Works! */\nstream$.pipe(tap&lt;number&gt;(_count.next)).subscribe()\n</code></pre>\n<h3 id=\"solutions\">Solutions</h3>\n<ol>\n<li><p>Pass in the observer object</p>\n<p> The straightforward solution would be to simply to pass in the observer object into the <code>tap</code> operator:</p>\n<pre><code class=\"language-tsx\">/* This works */\nstream$.pipe(\n    tap(observerStore)\n).subscribe()\n</code></pre>\n</li>\n<li><p>Bind the observer to <code>this</code></p>\n<p> One could use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"><code>Function.prototype.bind</code></a> which is available to the function prototype to bind <code>this</code> to the observer object so that when <code>this</code> is referenced, the function references the observer instead of the global <code>this</code> object:</p>\n<pre><code class=\"language-tsx\">/* _count Subjct */\nstream$.pipe(\n    tap(_count.next.bind(_count))\n).subscribe()\n\n/* the observerStore */\nstream$.pipe(\n    tap(observerStore.next.bind(observerStore))\n).subscribe()\n</code></pre>\n<p> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">As the MDN docs state</a>, “The <strong><code>bind()</code></strong> method creates a new function that, when called, has its <code>this</code>keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.”</p>\n</li>\n</ol>\n<p>Although both of the solutions work, passing the observer object is much more clear to another reader of the code on what is going on whereas the latter would cause someone who didn&#39;t write the code to stop and ask why we are calling <code>.bind</code> in the first place.</p>\n<p>Happy hacking!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">MDN references on <code>Function.prototype.bind()</code></a></li>\n<li><a href=\"https://rxjs.dev/api/operators/tap\">RxJs <code>tap</code> operator</a></li>\n<li><a href=\"https://rxjs.dev/guide/operators\">RxJs Operators</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/rxjx-pitfalls-passing-observer-next-to-pipe-able-operator.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/rxjx-pitfalls-passing-observer-next-to-pipe-able-operator.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@fakurian?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Milad Fakurian</a> on <a href=\"https://unsplash.com/s/photos/line-wallpaper?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Customizing Angular Material with your own palette</title>\n                <link>https://www.laudebugs.me/dev/customizing-angular-material-palette</link>\n                <pubDate>2022-09-28T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/customizing-angular-material-palette</guid>\n                <description>\n                    <![CDATA[ Angular Material provides a lot of flexibility in making your application represent your brand. In this article, we will look at how to customize the colors of Angular Material components to match your brand colors using several open source tools.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p><a href=\"https://material.angular.io/guide/theming\">Angular Material</a> provides flexibility in making your website look and feel like the brand you are trying to build.</p>\n<p>One of these the ways the library achieves this is by adding your own palette instead of <a href=\"https://material.angular.io/guide/theming#using-a-pre-built-theme\">the default themes</a>: <code>deep-purple-amber</code>, <code>indigo-pink</code>, <code>purple-green</code> or <code>pink-bluegrey</code>.</p>\n<p>The first thing you&#39;d need to do is select your primary, accent and tertiary colors. <a href=\"https://material.io/resources/color/#!/\">The material.io Color Tool</a> provides a useful visual preview of what your primary and accent colors would look like on an application interface.</p>\n<p>Here&#39;s a sample which you <a href=\"https://material.io/resources/color/#!/?primary.color=673AB7&amp;secondary.color=9C27B0&amp;view.left=0&amp;view.right=0\">can also preview here:</a></p>\n<p>&lt;img\n    alt=&quot;Using the Material UI Color Tool to select your primary and accent colors&quot;\n    src={&#39;<a href=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/using-material-design-color-tool.png&#39;%7D\">https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/using-material-design-color-tool.png&#39;}</a>\n    width={&#39;100%&#39;}\n/&gt;</p>\n<p>The tool also shows you how accessible your color palette is against fonts of various colors. <a href=\"https://material.io/resources/color/#!/?primary.color=673AB7&amp;secondary.color=9b27af&amp;view.left=1&amp;view.right=0\">With the above palette</a>, for instance, the <code>P-Dark</code> with black text would not be as visible.</p>\n<p>Although this tool doesn&#39;t provide an option to add a <code>warn</code> color, the angular material <a href=\"https://material.angular.io/guide/theming#defining-a-theme\">documentation makes this palette optional</a> and defaults to <code>red</code> if not specified.</p>\n<p>With the palette above: (primary: <code>#673ab7</code>, secondary: <code>#9b27af</code>, and a warn color value of <code>#f4511e</code>), we can use an open source tool called <a href=\"https://github.com/mbitson/mcg\">Material Design Palette generator</a> to generate hues of 50 and then each 100 between 100 and 900 without having to do this manually.</p>\n<p>Our resulting palette would look like below. You could also <a href=\"http://mcg.mbitson.com/#!?primary=%23673ab7&amp;accent=%239b27af&amp;warn=%23f4511e&amp;themename=material-palette\">play around with the palette here</a> and try out different colors as well.</p>\n<p>&lt;img\n    alt=&quot;Using the Material UI Palette Generator to generate a palette&quot;\n    src={&#39;<a href=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/using-the-palette-generator.png&#39;%7D\">https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/using-the-palette-generator.png&#39;}</a>\n    width={&#39;100%&#39;}\n/&gt;</p>\n<p>The cool thing about the tool above is that it provides an easy export function for various frameworks including Android, Angular, React, Vue, Ember and more.</p>\n<p>Since we are using Angular, we would use the Angular 2 Material exported values which we can define in a <code>palette.scss</code> file:</p>\n<pre><code class=\"language-scss\">/* For use in src/lib/core/theming/_palette.scss */\n$primary: (\n    50: #ede7f6,\n    100: #d1c4e9,\n    200: #b39ddb,\n    300: #9575cd,\n    400: #7e58c2,\n    500: #673ab7,\n    600: #5f34b0,\n    700: #542ca7,\n    800: #4a259f,\n    900: #391890,\n    A100: #d4c7ff,\n    A200: #ad94ff,\n    A400: #8661ff,\n    A700: #7347ff,\n    contrast: (\n        50: #000000,\n        100: #000000,\n        200: #000000,\n        300: #000000,\n        400: #ffffff,\n        500: #ffffff,\n        600: #ffffff,\n        700: #ffffff,\n        800: #ffffff,\n        900: #ffffff,\n        A100: #000000,\n        A200: #000000,\n        A400: #ffffff,\n        A700: #ffffff,\n    ),\n);\n\n$accent: (\n    50: #f3e5f5,\n    100: #e1bee7,\n    200: #cd93d7,\n    300: #b968c7,\n    400: #aa47bb,\n    500: #9b27af,\n    600: #9323a8,\n    700: #891d9f,\n    800: #7f1796,\n    900: #6d0e86,\n    A100: #efb7ff,\n    A200: #e384ff,\n    A400: #d851ff,\n    A700: #d237ff,\n    contrast: (\n        50: #000000,\n        100: #000000,\n        200: #000000,\n        300: #000000,\n        400: #ffffff,\n        500: #ffffff,\n        600: #ffffff,\n        700: #ffffff,\n        800: #ffffff,\n        900: #ffffff,\n        A100: #000000,\n        A200: #000000,\n        A400: #000000,\n        A700: #ffffff,\n    ),\n);\n\n$warn: (\n    50: #feeae4,\n    100: #fccbbc,\n    200: #faa88f,\n    300: #f78562,\n    400: #f66b40,\n    500: #f4511e,\n    600: #f34a1a,\n    700: #f14016,\n    800: #ef3712,\n    900: #ec270a,\n    A100: #ffffff,\n    A200: #ffe5e2,\n    A400: #ffb7af,\n    A700: #ffa096,\n    contrast: (\n        50: #000000,\n        100: #000000,\n        200: #000000,\n        300: #000000,\n        400: #000000,\n        500: #ffffff,\n        600: #ffffff,\n        700: #ffffff,\n        800: #ffffff,\n        900: #ffffff,\n        A100: #000000,\n        A200: #000000,\n        A400: #000000,\n        A700: #000000,\n    ),\n);\n</code></pre>\n<p>In our <code>theme.scss</code> file, we would then define our palette as below:</p>\n<pre><code class=\"language-scss\">@use &#39;./palette.scss&#39; as palette;\n@use &#39;@angular/material&#39; as mat;\n@import &#39;@angular/material/theming&#39;;\n\n$app-primary: mat.define-palette(palette.$primary);\n$app-accent: mat.define-palette(palette.$accent);\n$app-warn: mat.define-palette(palette.$warn);\n\n$app-theme: mat.define-light-theme(\n    (\n        color: (\n            primary: $app-primary,\n            accent: $app-accent,\n            warn: $app-warn,\n        ),\n    )\n);\n@include mat.all-component-themes($app-theme);\n</code></pre>\n<p>And just like that, we have customized our Angular App using Angular Material and a custom theme.</p>\n<h2 id=\"links-and-resources\">Links and Resources</h2>\n<ul>\n<li><a href=\"https://material.angular.io/\">Angular Material</a></li>\n<li><a href=\"https://material.io/resources/color/#!\">Material Design Color Tool</a></li>\n<li><a href=\"https://github.com/mbitson/mcg\">Material Design Palette Generator</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/customizing-angular-material-palette.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/customizing-angular-material-palette.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@nordwood?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">NordWood Themes</a> on <a href=\"https://unsplash.com/s/photos/design?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Writing a Custom RxJS Operator</title>\n                <link>https://www.laudebugs.me/dev/writing-a-custom-rxjs-operator</link>\n                <pubDate>2022-07-23T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/writing-a-custom-rxjs-operator</guid>\n                <description>\n                    <![CDATA[ RxJs has a ton of operators that you can use within your observable streams. But how would you approach writing your own custom operators for some specific use case?]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p>While working with <code>rxjs</code>, there are plenty of operators that one can use within the <code>.pipe</code> operator of an observable. Just take a look at the api reference here and you&#39;ll realize that <code>rxjs</code> provides all the operators that you need for most cases.</p>\n<p>However, what if you needed to write your custom operator to transform data the way you wanted, or tweak the <code>captureError</code> operator to handle the error in a certain way and return something else in case an error happened.</p>\n<p>In an application I was working on, for which I was using <a href=\"https://docs.sentry.io/\">Sentry</a> to handle any errors, I wanted to have the <code>captureError</code> to send the error message to Sentry, and return fallback data in case an error happened.</p>\n<pre><code class=\"language-tsx\">import { captureException } from &#39;@sentry/angular&#39;\nimport { BehaviorSubject, Observable, OperatorFunction, catchError, tap } from &#39;rxjs&#39;\n\nexport function consume&lt;T&gt;(consumer: BehaviorSubject&lt;T&gt;, fallback$: Observable&lt;T&gt;): OperatorFunction&lt;T, T&gt; {\n    return (source$: Observable&lt;T&gt;) =&gt; {\n        return source$.pipe(\n            catchError((error) =&gt; {\n                captureException(error)\n                return fallback$\n            }),\n            tap(consumer),\n        )\n    }\n}\n</code></pre>\n<Aside>\n\n<p>Note that the <code>rxjs</code> tap operator takes either an observer object. In our case, our <code>consumer</code> is a <code>Behavior Subject</code> <a href=\"https://rxjs.dev/guide/subject\">which is also an observer</a>.</p>\n</Aside>\n\n<p>The operator above is written in the form of <a href=\"https://javascript.info/currying-partials\">a curried function</a>, that accepts two initial inputs: <code>consumer</code> - which in this case was a behavior subject that stores the current value in the observable stream, and <code>fallback$</code> which is the data to return in case an error happens. If no error happens, the <code>captureError</code> rxjs operator isn&#39;t called. In all cases, either the data from the observable stream or the fallback data is passed on to the consuming <a href=\"https://rxjs.dev/api/index/class/BehaviorSubject\">behavior Subject.</a></p>\n<p>And there we have it! Our own custom RxJS operator 🧞‍♂️</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://rxjs.dev/\">RxJs documentation</a></li>\n<li><a href=\"https://rxjs.dev/api/index/class/Subject\">RxJs Subject reference</a></li>\n<li><a href=\"https://www.learnrxjs.io/learn-rxjs/operators/error_handling/catch\">catch / catchError in RxJs</a></li>\n<li><a href=\"https://docs.sentry.io/platforms/javascript/\">Sentry JavaScript library documentation</a></li>\n<li><a href=\"https://javascript.info/currying-partials\">Currying in JavaScript</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/writing-a-custom-rxjs-operator.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/writing-a-custom-rxjs-operator.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@solenfeyissa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Solen Feyissa</a> on <a href=\"https://unsplash.com/s/photos/flow?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Dynamic Components in Angular</title>\n                <link>https://www.laudebugs.me/dev/dynamic-components-angular</link>\n                <pubDate>2022-02-07T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/dynamic-components-angular</guid>\n                <description>\n                    <![CDATA[ Building dynamic components in Angular can be tricky at times. However, with Dynamic components, we have granular control over how we can generate components in our application and use this feature to our advantage.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p>Angular components can be created (instantiated) at build-time or at run-time. Creating components at run-time (dynamically) is what we are going to look at.</p>\n<p>Broadly speaking, there are two ways to create dynamic components in Angular:</p>\n<ol>\n<li>Using a <code>ViewContainerRef</code> - that “represents a container where one or more views can be attached to a component.” or</li>\n<li>By using Angular&#39;s built in <code>NgComponentOutlet</code> directive</li>\n</ol>\n<p>The main focus of this article will be the former, using a <code>ViewContainerRef</code> to create dynamic components since the Angular documentation is really clear on the second way - using <code>NgComponentOutlet</code>.</p>\n<h1 id=\"using-viewcontainerref\">Using <code>ViewContainerRef</code></h1>\n<p>The <code>ViewContainerRef</code> is a class that gets access to a container where other components (host views) can be inserted at run time using the <code>createComponent()</code> method of the <code>ViewContainerRef</code> class.</p>\n<p>To dynamically create a component, we have to decide how and where we would like to place the component (the “anchor point”).</p>\n<h2 id=\"defining-the-anchor-point\">Defining the anchor point</h2>\n<p>How you define the anchor point determines where you can place it within a host component.</p>\n<h3 id=\"the-anchor-directive\">The Anchor Directive</h3>\n<p>Following the <a href=\"https://angular.io/guide/dynamic-component-loader#the-anchor-directive\">Angular docs example</a> on creating a dynamic component, one can utilize a directive placed on an element such that the element will act as an insertion point to the dynamic component (a host - i.e. “Create the dynamic component and place me wherever you see this directive” on an element.)</p>\n<p>To achieve this, we first create the directive and inject the <code>ViewContainerRef</code> . The <code>ViewContainerRef</code> will get a reference to the element on which the directive is placed, dynamically create the component and insert it into the view at the position where the element is.</p>\n<p>Take the scenario where we would like to create a list of user profiles with images for which we would want to display (a simple example that can be achieved with other ways but easy enough to demonstrate with dynamic components)</p>\n<pre><code class=\"language-ts\">import { Directive, ViewContainerRef } from &#39;@angular/core&#39;\n\n@Directive({\n    selector: &#39;[userProfileHost]&#39;,\n})\nexport class UserProfileDirective {\n    constructor(public viewContainerRef: ViewContainerRef) {}\n}\n</code></pre>\n<p>When we then create our host component template, we can place this directive on an element such as a <code>div</code> or using angular&#39;s <code>ng-template</code> or <code>ng-container</code>.</p>\n<pre><code class=\"language-html\">&lt;!-- using an html element --&gt;\n&lt;div userProfileHost&gt;&lt;/div&gt;\n\n&lt;!-- Using ng-template --&gt;\n&lt;ng-template userProfileHost&gt;&lt;/ng-template&gt;\n\n&lt;!-- using ng-container --&gt;\n&lt;ng-container userProfileHost&gt;&lt;/ng-container&gt;\n</code></pre>\n<p>We can then get a reference to the element with the directive by querying the component template for the first occurrence of the directive (using <code>ViewChild</code> ), or all occurrences of the directive (using <code>ViewChildren</code>):</p>\n<pre><code class=\"language-ts\">/* Using ViewChild to get the first occurrence */\n@ViewChild(UserProfileDirective, { static: true }) userProfileHost: UserProfileDirective;\n\n/* Using ViewChildren to get the all occurrences */\n@ViewChildren(UserProfileDirective, { static: true }) userProfileHosts: QueryList&lt;UserProfileDirective&gt;;\n</code></pre>\n<Aside>\n\n<p>Note that <code>@ViewChildren</code> will return a <code>QueryList</code> - that contains a list of of <code>ViewContainerRef</code> types. To get elements inside of the <code>QueryList</code>, one can use the <code>QueryList</code>&#39;s <code>.length</code> property together with the <code>.get</code> method to get an element at a particular index. For example, for a query list of length 1, we can get the first element by <code>userProfileHosts.get(0)</code>. In our example this will return a <code>ViewContainerRef</code> that contains a <code>UserProfileDirective</code> instance. Documentation on <a href=\"https://angular.io/api/core/ViewChildren\"><code>@ViewChildren</code> can be found here</a> .</p>\n</Aside>\n\n<h3 id=\"using-a-template-variable-to-target-an-element-as-an-anchor\">Using a Template Variable to target an element as an Anchor</h3>\n<p>One can target an element to act as a host for our dynamic component by using a template variable that follows the syntax <code>#</code> followed by whatever variable name we would like. For example, if our template variable name is to be called: <code>UserProfileEntry</code> then, in our html template, we would have:</p>\n<pre><code class=\"language-html\">&lt;!-- using an html element --&gt;\n&lt;div #UserProfileEntry&gt;&lt;/div&gt;\n\n&lt;!-- Using ng-template --&gt;\n&lt;ng-template #UserProfileEntry&gt;&lt;/ng-template&gt;\n\n&lt;!-- using ng-container --&gt;\n&lt;ng-container #UserProfileEntry&gt;&lt;/ng-container&gt;\n</code></pre>\n<h3 id=\"the-host-view-as-the-anchor\">The Host View as the Anchor</h3>\n<p>We can use the host view (the component in which we will create the dynamic component) as an anchor for the newly created component. In this case, the created components would be appended at the end of the DOM tree. This works if we know that we don&#39;t have to insert the newly created elements before other elements that were generated at build time.</p>\n<p>In this case, we inject the <code>ViewContainerRef</code> into the component:</p>\n<h2 id=\"creating-the-dynamic-component\">Creating the Dynamic Component</h2>\n<p>Taking the <code>@ViewChild</code> use case, (the same applies to the <code>@ViewChildren</code> case), the view queries are set before the <code>ngAfterViewInit</code> life cycle hook is called. We can then create our dynamic components at this point.</p>\n<pre><code class=\"language-ts\">import { Component, OnDestroy, AfterViewInit, ViewChild, } from &#39;@angular/core&#39;;\n\n/* Assume we created this UserProfile component somewhere else */\nimport { UserProfileComponent } from &#39;./user-profile/user-profile-component.ts&#39;;\n\n/* Assume that we have a User Service that retrieves user profile data */\nimport { UserService } from &#39;./services/user-service/user.service.ts&#39;;\n@Component({\n    selector: &#39;app-component&#39;,\n    template: `&lt;ng-template userProfileHost&gt;&lt;/ng-template&gt;`,\n})\nexport clase AppComponent extends OnInit, AfterViewInit {\n    @ViewChild(UserProfileDirective, { static: true }) userProfileHost: UserProfileDirective;\n    userProfile!: {username: string, picture: string}\n\n    constructor(public userService: UserService){}\n\n    ngOnInit(){\n        this.userProfile = this.userService.profile\n    }\n\n    /* Create dynamic components here */\n    ngAfterViewInit(){\n        const viewContainerRef = this.userProfileHost.viewContainerRef\n\n        // Create the component\n        const userProfileComponent = viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent)\n\n        // Pass data to the dynamically created component here.\n        userProfileComponent.instance.profile = this.userProfile\n    }\n}\n</code></pre>\n<p>Similar example while using a template reference as an anchor:</p>\n<pre><code class=\"language-ts\">// ... code ommited\n@Component({\n    selector: &#39;app-component&#39;,\n    template: `\n                &lt;ng-container #UserProfileEntry&gt;&lt;/ng-container&gt;\n                `,\n})\nexport clase AppComponent extends OnInit, AfterViewInit {\n\n    @ViewChild(&#39;UserProfileEntry&#39;, { read: ViewContainerRef}) userProfileEntry: ViewContainerRef\n\n    // ... code ommited\n\n    ngAfterViewInit(){\n        const userProfileComponent = this.userProfileEntry.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent)\n        userProfileComponent.instance.user = this.userProfile;\n    }\n}\n</code></pre>\n<p>Similar example using the host element as the anchor:</p>\n<pre><code class=\"language-ts\">// ... code ommited\n@Component({\n    selector: &#39;app-component&#39;,\n    template: `&lt;h1&gt; Host element &lt;/h1&gt;`,\n})\nexport clase AppComponent extends OnInit, AfterViewInit {\n\n    // ... code ommited\n\n    /* Inject the ViewContainerRef into the component */\n    constructor(public viewContainerRef: ViewContainerRef){}\n\n    ngAfterViewInit(){\n        /* Create the component */\n        const userProfileComponent = this.viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent)\n        /* Pass data to the dynamically created component here. */\n        userProfileComponent.instance.profile = this.userProfile\n    }\n}\n</code></pre>\n<Aside>\n\n<p>Notice that we are directly modifying the data of the dynamically created component.😱\nThis works, but it becomes problematic when you want to be strict about immutability or uni-directional data flow, and with <code>QueryLists</code>, we can&#39;t use this approach since the elements in the <code>QueryList</code> are immutable.</p>\n</Aside>\n\n<p>We also see another issue with this approach. Since we mutate the data of the dynamic component, Angular&#39;s change detection will throw the <code>ExpressionChangedAfterItHasBeenCheckedError</code> warning that you may have encountered before:</p>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n\n<p><img\n    width=\"80%\"\n    src=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/expression-changed-after-checked.png\"\n/></p>\n</div>\n\n<p>The reason for this particular case is that angular has detected that we have changed the variable after it was last checked when the dynamically created component&#39;s view was initialized.</p>\n<p>Some ways to resolve this is to move our code into the <code>ngAfterContentInit</code> life cycle hook or injecting the change detector (<code>ChangeDetectorRef</code>) and calling its <code>detectChanges()</code> method:</p>\n<ol>\n<li><p><code>ngAfterContentInit</code></p>\n<pre><code class=\"language-ts\">// code ommitted\nexport class AppComponent implements AfterContentInit {\n    /* Inject the ChangeDetectorRef */\n    constructor(cd: ChangeDetectorRef) {}\n\n    /* Implement the AfterContentInit life cycle hook */\n    ngAfterContentInit() {\n        /* Create the component */\n        const userProfileComponent = this.viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent)\n\n        /* Pass data to the dynamically created component here. */\n        userProfileComponent.instance.profile = this.userProfile\n    }\n}\n</code></pre>\n</li>\n<li><p>using the <code>ChangeDetectorRef</code></p>\n<pre><code class=\"language-ts\">// code ommitted\nexport class AppComponent implements AfterViewInit {\n    /* Inject the ChangeDetectorRef */\n    constructor(cd: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        /* Create the component */\n        const userProfileComponent = this.viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent)\n\n        /* Pass data to the dynamically created component here. */\n        userProfileComponent.instance.profile = this.userProfile\n\n        /*  Tell angular to check for changes */\n        this.cd.detectChanges()\n    }\n}\n</code></pre>\n</li>\n</ol>\n<p>The <code>ViewContainerRef</code> also provides a way to inject dependencies into our dynamically created component in the options object (<a href=\"https://angular.io/api/core/ViewContainerRef#createcomponent\">the optional second parameter of the <code>createComponent</code> method</a>). The options object contains the following extra parameters (quoted from the Angular docs):</p>\n<ul>\n<li><code>index</code> - the index at which to insert the new components host view</li>\n<li><code>injector</code> - the injector to use as the parent for the new component</li>\n<li><code>ngModuleRef</code> - an ngModuleRef of the component&#39;s <code>NgModule</code></li>\n<li><code>projectableNodes</code> - list of Dom nodes that should be projected though <code>ng-content</code></li>\n</ul>\n<p>Things begin to get a little more interesting as we explore this options object and how it expands our flexibility with dynamically created components. We&#39;ll explore the first two for now (<code>index</code> and <code>injector</code>.</p>\n<h3 id=\"index\"><code>index</code></h3>\n<p>The <code>index</code> parameter allows us to insert a dynamically created component at a particular index. Say we would like to create a second component dynamically and place it at index <code>0</code>, then we would do something like:</p>\n<pre><code class=\"language-ts\">const userProfileComponent2 = viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent, { index: 0 })\n</code></pre>\n<p>Of course, we can&#39;t place an element at index <code>1</code> if the length of dynamically created components in the <code>ViewContainerRef</code> is <code>0</code>.</p>\n<h3 id=\"injector\"><code>injector</code></h3>\n<p>We can inject dependencies into our dynamic components using the <code>injector</code> parameter.</p>\n<p>Say, for instance, we want to pass in the user data when we create the component. We can first create an injector token that we can user for that dependency:</p>\n<pre><code class=\"language-ts\">import { InjectionToken } from &#39;@angular/core&#39;\n\nexport const USER_TOKEN = new InjectionToken&lt;string&gt;(&#39;user&#39;)\n</code></pre>\n<p>In our <code>user-profile.component.ts</code> file, we can then pass this dependency as a required dependency, or mark it as an optional dependency in the constructor - if you want to:</p>\n<pre><code class=\"language-ts\">// In user-profile.component.ts\nconstructor(@Inject(USER_TOKEN) public user: IUser) {}\n\n// As an optional dependency\nconstructor(@Inject(USER_TOKEN) @Optional() public user: IUser) {}\n</code></pre>\n<p>In our app.component.ts, we would then create an injector and pass it to our component when we create it. Firstly, we provide our token and pass in the value that we would like to be available to the dynamically created component.</p>\n<pre><code class=\"language-ts\">// ... code ommitted\nexport class AppComponent extends AfterViewInit {\n    constructor(public injector: Injector) {}\n    // code ommited\n    ngAfterViewInit() {\n        /* Create the injector to be passed to the component and provide the value */\n        const injector = Injector.create({\n            providers: [{ provide: USER_TOKEN, useValue: this.userProfile }],\n            parent: this.injector,\n        })\n\n        /* Create the component with the injector passed in */\n        const userProfileComponent = viewContainerRef.createComponent&lt;UserProfileComponent&gt;(UserProfileComponent, {\n            index: 0,\n            injector: injector,\n        })\n    }\n}\n</code></pre>\n<Aside>\n\n<p>It&#39;s interesting to point out that marking the dependency as optional (using the <code>@Optional()</code> decorator) means that we can leave it out when creating the dynamic component. Otherwise, we would run into a null injector error when we call <code>createComponent</code> (<code>R3InjectorError</code>):</p>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n\n<img width=\"80%\" src=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/_/null-injector-token.png\" />\n\n</div>\n\n</Aside>\n\n<h2 id=\"noteworthy\">Noteworthy</h2>\n<p>In previous versions of Angular, Dynamically created components had to be added to the <code>entryComponents</code> of the <code>NgModule</code> in which they are to be imported. With Ivy, this is no longer a requirement and they can be imported the same way as other components. <a href=\"https://angular.io/guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\">You can read more about it here.</a></p>\n<h2 id=\"recap\">Recap</h2>\n<p>However you decide to choose where to anchor your components, all these ways are valid and can go far in and of themselves. One advantage of dynamically generating the component using the <code>ViewContainerRef</code> is that you have access to the current state of the newly created component and can leverage it for your particular use case.</p>\n<h1 id=\"ngcomponentoutlet\"><code>NgComponentOutlet</code></h1>\n<p>The <code>NgComponentOutlet</code> directive provides a “declarative approach for dynamic component creation” (<a href=\"https://angular.io/api/common/NgComponentOutlet#ngcomponentoutlet\">quoted from the Angular docs</a>). Here, the documentation is pretty clear on how to use this directive to dynamically create a component.</p>\n<Aside>\n\n<p>The example code can be found in the <a href=\"https://stackblitz.com/edit/angular-ivy-lzyecr\">stackblitz here.</a></p>\n</Aside>\n\n<h2 id=\"resources-and-links\">Resources and Links</h2>\n<ul>\n<li><a href=\"https://angular.io/guide/dynamic-component-loader\">Dynamic component loader</a></li>\n<li><a href=\"https://angular.io/api/core/ViewContainerRef\">ViewContainerRef</a></li>\n<li><a href=\"https://angular.io/api/common/NgComponentOutlet#ngcomponentoutlet\">NgComponentOutlet</a></li>\n<li><a href=\"https://angular.io/api/core/QueryList\">QueryList</a></li>\n<li><a href=\"https://stackblitz.com/edit/angular-ivy-lzyecr\">Stackblitz example on Dynamic Components</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/dynamic-components-angular.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/dynamic-components-angular.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@theshubhamdhage?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Shubham Dhage</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Implementation of GraphQL subscriptions on React Native using Apollo Client with a Lambda GrahphQL Server</title>\n                <link>https://www.laudebugs.me/dev/graphql-subs-with-aws-lambda-and-apollo-client</link>\n                <pubDate>2022-01-24T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/graphql-subs-with-aws-lambda-and-apollo-client</guid>\n                <description>\n                    <![CDATA[ A simple walkthrough on how to use AWS Apollo links with the Apollo GraphQL client on a React Native project]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <p>GraphQL queries and mutations to an AWS Lambda GraphQL api can be achieved by implementing libraries such as <a href=\"https://www.apollographql.com/docs/react/get-started/\">Apollo Client</a>.\nHowever, implementing subscriptions isn&#39;t as straight forward since the <a href=\"https://stackoverflow.com/questions/53734213/apollo-server-lambda-subscriptions#:~:text=GraphQL%20subscriptions%20are%20not%20supported,which%20kills%20the%20websocket%20connection.\">AWS Lambda is a serverless architecture.</a>\nImplementing subscriptions can be done <a href=\"https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html#appsynclong-real-time-websocket-client-implementation-guide-for-graphql-subscriptions\">following the AWS implementation docs</a> - although we don&#39;t want to go into that rabbit hole as well as the option of using <a href=\"https://docs.amplify.aws/lib/q/platform/js/\">AWS&#39; Amplify JavaScript Libraries</a>.</p>\n<blockquote>\n<p>In our case, we would like to take advantage of <a href=\"https://www.apollographql.com/docs/react/why-apollo/\">Apollo Client&#39;s</a> apis that offer useful features within a react application such as hooks, caching, and also since it&#39;s simpler (one can argue). 💁</p>\n</blockquote>\n<h2 id=\"setup\">Setup</h2>\n<p>To get started, working with queries and mutations can be achieved by following <a href=\"https://www.apollographql.com/docs/react/get-started/\">Apollo&#39;s documentation.</a>. Where it get&#39;s interesting is once a subscription is needed to be made by the client.</p>\n<p>First, we need to configure our Apollo client to <a href=\"https://github.com/awslabs/aws-mobile-appsync-sdk-js#aws-appsync-links-for-apollo-v3\">make use of the Apollo links to connect to the AppSync api</a>. These are: <code>aws-appsync-auth-link</code> and <code>aws-appsync-subscription-link</code>. The former provides authentication for the Apollo client to connect to the api while the later provides the subscription tooling that AWS Lambdas need to work with subscriptions, which <a href=\"https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html#appsynclong-real-time-websocket-client-implementation-guide-for-graphql-subscriptions\">we would have otherwise needed to implement ourselves</a>.🤢</p>\n<p>The example provided in <a href=\"https://github.com/awslabs/aws-mobile-appsync-sdk-js#using-authorization-and-subscription-links-with-apollo-client-v3-no-offline-support\">the docs here</a> is pretty straightforward.\nIn our case, the <code>auth</code> provided to the Apollo links would look like:</p>\n<pre><code class=\"language-ts\">const auth = {\n  type: &#39;OPENID_CONNECT&#39;\n  jwtToken: async () =&gt; token, // Required when you use Cognito UserPools OR OpenID Connect. token object is obtained previously\n};\n</code></pre>\n<p>Although, the only thing to note is that, since we need to provide a token to the client, we just pass in our token that retrieves the most current Open ID JWT to pass to our requests.</p>\n<p>Thus:</p>\n<pre><code class=\"language-ts\">const link = ApolloLink.from([\n    createAuthLink({\n        url: API_URL,\n        region: AWS_REGION,\n        auth: { type: &#39;OPENID_CONNECT&#39;, jwtToken: async () =&gt; await getToken() },\n    }),\n    createSubscriptionHandshakeLink(\n        { url: API_URL, region: AWS_REGION, auth: { type: &#39;OPENID_CONNECT&#39;, jwtToken: async () =&gt; await getToken() } },\n        httpLink,\n    ),\n])\n</code></pre>\n<p>This workaround was noted <a href=\"https://github.com/aws-amplify/amplify-js/issues/992\">in this issue on Github.</a></p>\n<h2 id=\"issues\">Issues</h2>\n<ul>\n<li><h4 id=\"unable-to-resolve-module-buffer\">Unable to resolve module <code>buffer</code>:</h4>\n&lt;img width={&#39;100%&#39;} alt=&quot;Screen Shot 2022-01-24 at 4 57 07 PM&quot; src=&quot;<a href=\"https://user-images.githubusercontent.com/25782070/150878930-80928c4c-0e1e-421b-8314-3c1c580ebf97.png&quot;/&gt;\">https://user-images.githubusercontent.com/25782070/150878930-80928c4c-0e1e-421b-8314-3c1c580ebf97.png&quot;/&gt;</a></li>\n</ul>\n<p>This can be solved by installing <code>buffer</code> and adding it to to the <code>App.tsx</code> file as noted in <a href=\"https://stackoverflow.com/questions/55226768/error-unable-to-resolve-module-buffer-react-native\">here on Stack overflow</a>.</p>\n<pre><code class=\"language-ts\">import { Buffer } from &#39;buffer&#39;;\n\nglobal.Buffer = Buffer;\n</code></pre>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/62502579/appsync-subscriptions-with-apolloclient-in-react\">AppSync subscriptions with ApolloClient in React</a></li>\n<li><a href=\"https://github.com/awslabs/aws-mobile-appsync-sdk-js#using-authorization-and-subscription-links-with-apollo-client-v3-no-offline-support\">Using Authorization and Subscription links with Apollo Client V3 (No offline support)</a></li>\n<li><a href=\"https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html#appsynclong-real-time-websocket-client-implementation-guide-for-graphql-subscriptions\">Building a real-time WebSocket client</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/graphql-subs-with-aws-lambda-and-apollo-client.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/graphql-subs-with-aws-lambda-and-apollo-client.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@timmossholder?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Tim Mossholder</a> on <a href=\"https://unsplash.com/s/photos/connection?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Organizing Codebases with Automation Tools</title>\n                <link>https://www.laudebugs.me/dev/organizing-codebases-js</link>\n                <pubDate>2021-11-17T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/organizing-codebases-js</guid>\n                <description>\n                    <![CDATA[ JavaScript or TypeScript codebases can be a hustle to manage. Some people like their spacebars a lot more than their tabs; How can we track changes effectively on each commit? Or how can we automate versioning? We all can do with some standards in our codebase that allow us to keep track of what's going on in them.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <Aside>\n  Over the past couple of months, shuffling between different projects, and also work, I found it particularly useful to have some standard\n  way to organize a codebase - even if each of the projects differed in some way or another. This little guide is what I come back to\n  whenever I'm scaffolding a new project.\n</Aside>\n\n<br />\n\n<h2 id=\"tools-mentioned-in-this-guide\">Tools Mentioned in this guide</h2>\n<ul>\n<li><a href=\"https://typicode.github.io/husky/#/\">Husky</a></li>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://eslint.org/\">Eslint</a></li>\n<li><a href=\"https://www.npmjs.com/package/@commitlint/cli\">Commitlint</a></li>\n<li><a href=\"https://www.npmjs.com/package/commitizen\">Commitizen</a></li>\n<li><a href=\"https://www.npmjs.com/package/standard-version\">Standard Version</a></li>\n</ul>\n<h3 id=\"husky\"><a href=\"https://typicode.github.io/husky/#/\">Husky</a></h3>\n<p>Husky is used to make our commits more cool, and powerful to help development easier. In this guide, husky will be used to format both the files (source code) and commits themselves before they are executed (thus &quot;pre&quot; in the pre-commit hooks).</p>\n<p><a href=\"https://typicode.github.io/husky/#/\">Read more here.</a></p>\n<ul>\n<li><p><a href=\"https://typicode.github.io/husky/#/?id=automatic-recommended\">Initialize Husky:</a></p>\n<pre><code class=\"language-bash\"># install husky\nnpm install -D husky\n\n# initialize\nnpx husky-init\n</code></pre>\n</li>\n</ul>\n<h2 id=\"prettier--eslint\">Prettier &amp; EsLint</h2>\n<p>If we would like to have our commits automatically format our code on every commit - to ensure that the codebase follows a specified standard, defined in the <code>prettierrc</code> file, then this is a handy tool to have.</p>\n<ol>\n<li><p>Add Prettier and eslint to your project:</p>\n<pre><code class=\"language-bash\"># prettier\nnpm install -D prettier\n\n# eslint\nnpm install -D eslint\n</code></pre>\n</li>\n<li><p>Add a prettier <a href=\"https://prettier.io/docs/en/configuration.html\">config file</a> to the repository - named <code>.prettierrc.json</code> (or following the <a href=\"https://prettier.io/docs/en/configuration.html\">specified format</a> for configuration files:</p>\n<pre><code class=\"language-json\">{\n  &quot;trailingComma&quot;: &quot;all&quot;,\n  &quot;tabWidth&quot;: 4,\n  &quot;semi&quot;: false,\n  &quot;singleQuote&quot;: true\n  //more rules below\n}\n</code></pre>\n</li>\n<li><p>Initialize EsLint:</p>\n<pre><code class=\"language-bash\">npx eslint --init\n</code></pre>\n</li>\n<li><p>Set up ESLint to work with prettier</p>\n<p>Add prettier plugin to the eslint configuration file:</p>\n<pre><code class=\"language-json\">// .eslintrc.json\n{\n  &quot;extends&quot;: [\n    // other extensions,\n    &quot;prettier&quot;\n  ]\n}\n</code></pre>\n<p>Now, you can specify prettier rules to work with your linter and not have both ESLint and Prettier enforcing different styles</p>\n</li>\n<li><p>Add <a href=\"https://prettier.io/docs/en/precommit.html#option-2-pretty-quickhttpsgithubcomazzpretty-quick\">Prettier Pre-commit Hook</a>:</p>\n<pre><code class=\"language-bash\">npm install -D pretty-quick\n\nnpx husky set ./husky/pre-commit &quot;npx pretty-quick --staged&quot;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>There are more ways to configure your prettier pre-commit hooks <a href=\"https://prettier.io/docs/en/precommit.html#docsNav\">found here</a>.</p>\n</blockquote>\n<h2 id=\"commitlint--commitlint-hooks\"><a href=\"https://github.com/conventional-changelog/commitlint\">CommitLint</a> &amp; CommitLint Hooks</h2>\n<p>Commitlint is a tool that lints commits - and make sure they are up to standard.\nWe will also add a husky pre-commit hook that lints our commit messages</p>\n<ol>\n<li><p><a href=\"https://github.com/conventional-changelog/commitlint#getting-started\">Install Commitlint</a></p>\n<pre><code class=\"language-bash\">npm install -D @commitlint/config-conventional @commitlint/cli\n\n# Configure commitlint to use conventional config\necho &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot; &gt; commitlint.config.js\n</code></pre>\n</li>\n<li><p>. Add the commitlint hooks:</p>\n<pre><code class=\"language-bash\"># Add hook\nnpx husky add .husky/commit-msg &#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;\n</code></pre>\n</li>\n<li><p>Add a husky pre-commit hook config to the package.json</p>\n<pre><code class=\"language-json\">&quot;husky&quot;: {\n  &quot;hooks&quot;: {\n    &quot;prepare-commit-msg&quot;: &quot;exec &lt; /dev/tty &amp;&amp; git cz --hook || true&quot;\n  }\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"commitizen\"><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a></h2>\n<p>Commitizen is a command line interface tool that can be helpful in making commits a pretty-forward process following your linting rules.</p>\n<ol>\n<li><p>Install the tool</p>\n<pre><code class=\"language-bash\">npm install -D commitizen\n</code></pre>\n</li>\n<li><p>Add a script to the package.json to easily run commitizen:</p>\n<pre><code class=\"language-json\">{\n    &quot;scripts&quot;: {\n      &quot;commit&quot;: &quot;cz&quot;\n    }\n}\n</code></pre>\n<p>An Example use:</p>\n</li>\n</ol>\n<p><img\n  src=\"https://raw.githubusercontent.com/MechanicalHuman/hnp-utilities/master/packages/commitizen-adapter/hero.png\"\n  width=\"100%\"\n/></p>\n<p><a href=\"https://www.npmjs.com/package/@hnp/cz/v/1.0.7\">source</a></p>\n<Note>\nYou can customize the fields available in your commitizen CLI by <a href=\"https://medium.com/vlad-arbatov/development-how-to-adapt-a-custom-conventional-changelog-33ff3b13c832\"> following this guide</a>.\n</Note>\n\n<h2 id=\"conventional-changelog\">Conventional Changelog</h2>\n<p>This will assist in generating changelogs automatically from commits:</p>\n<ol>\n<li>Initialize:<pre><code class=\"language-bash\">npx commitizen init cz-conventional-changelog -D --save-exac\n</code></pre>\n</li>\n</ol>\n<h2 id=\"versioning-and-release\">Versioning and Release</h2>\n<p>We can use <a href=\"https://github.com/conventional-changelog/standard-version#standard-version\">Standard Version</a> to automatically generate versions for out projects.</p>\n<ol>\n<li><p>Install Standard Version</p>\n<pre><code class=\"language-bash\">npm install -D standard-version\n</code></pre>\n</li>\n<li><p>Add scripts to easily run releases and generate changelogs automaticallly:</p>\n<pre><code class=\"language-json\">{\n  &quot;scripts&quot;: {\n    &quot;release&quot;: &quot;standard-version&quot;\n  }\n}\n</code></pre>\n<p>Another option to Standard version is <a href=\"https://github.com/semantic-release/semantic-release\"><code>semantic-release</code></a></p>\n</li>\n</ol>\n<p>You can now run your first release by:</p>\n<pre><code class=\"language-bash\">npm run release\n</code></pre>\n<blockquote>\n<p>Plug: Here is an example of a <a href=\"https://www.laudebugs.me/changelog\">changelog for my website</a>.</p>\n</blockquote>\n<p>If you create a release - then you can push that release by running:</p>\n<pre><code class=\"language-bash\">git push --follow-tags\n</code></pre>\n<hr />\n\n<h2 id=\"update-25th-feb-2022\">Update (25th Feb 2022)</h2>\n<p>I ended up writing a simple npm package to automate setting this whole process up for new projects\nYou can find the package <a href=\"https://www.npmjs.com/package/organize-codebase\">here</a>.</p>\n<h2 id=\"references--resources\">References &amp; Resources</h2>\n<h3 id=\"articles\">Articles</h3>\n<ul>\n<li><a href=\"https://blog.logrocket.com/never-guess-about-project-history-again-31f65091f668/\">How to control your deployments and versioning with semantic-release &amp; friends</a>- (logrocket)</li>\n<li><a href=\"https://dev.to/migu3l/commit-standard-and-semantic-versioning-for-any-project-1ihc\">Commit Standard and Semantic Versioning for any project</a> - (dev)</li>\n<li><a href=\"https://medium.com/@jsilvax/automate-semantic-versioning-with-conventional-commits-d76a9f45f2fa\">Automate Semantic Versioning with Conventional Commits </a>(medium)</li>\n<li><a href=\"https://blog.logrocket.com/automatically-generate-and-release-a-changelog-with-node-js/\">Automatically generate and release a changelog using Node.js</a> (logrocket)</li>\n<li><a href=\"https://medium.com/vlad-arbatov/development-how-to-adapt-a-custom-conventional-changelog-33ff3b13c832\">Development: How to adapt a custom conventional changelog</a> (medium)</li>\n<li><a href=\"https://dev.to/sohandutta/make-everyone-in-your-project-write-beautiful-commit-messages-using-commitlint-and-commitizen-1amn\">Make everyone in your project write beautiful commit messages using commitlint and commitizen</a> - loved this one!</li>\n</ul>\n<h3 id=\"documentation\">Documentation</h3>\n<ul>\n<li><a href=\"https://typicode.github.io/husky/#/\">Husky</a></li>\n<li><a href=\"https://eslint.org/docs/user-guide/getting-started\">ESLint - Getting started</a></li>\n<li><a href=\"https://prettier.io/docs/en/precommit.html#docsNav\">Prettier - Pre-Commit Hooks</a></li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a></li>\n<li><a href=\"https://github.com/conventional-changelog/commitlint#getting-started\">Commitlint</a></li>\n<li><a href=\"https://github.com/conventional-changelog/standard-version#standard-version\">Conventional Changelog</a></li>\n<li><a href=\"https://github.com/semantic-release/semantic-release\">Semantic Release</a></li>\n</ul>\n<h3 id=\"other-useful-links\">Other Useful Links</h3>\n<ul>\n<li><a href=\"https://gitmoji.dev/\">Gitmoji</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/organizing-codebases-js.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/organizing-codebases-js.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@maxvdo\">Birmingham Museums Trust</a> on <a href=\"https://unsplash.com/photos/MZ0zABL7Bwo\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n            <item>\n                <title>Using your GitHub Repository as a Database</title>\n                <link>https://www.laudebugs.me/dev/using-your-github-repository-as-a-database</link>\n                <pubDate>2021-03-01T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/using-your-github-repository-as-a-database</guid>\n                <description>\n                    <![CDATA[ You don't have to look far for somewhere to store your content. GitHub is a great place to store your content. Together with the GitHub API, you can use GitHub make this happen.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <h1 id=\"how-to-use-your-repo-as-a-database-with-the-github-graphql-api\">How To: Use your Repo as a Database with the Github GraphQL API</h1>\n<Aside>\nYou can sort of use your Github repository as a database for your blog posts by leveraging the Github <a href=\"https://docs.github.com/en/graphql\">Graph QL API</a> 😱.\n</Aside>\n\n<h2 id=\"motivation\">Motivation</h2>\n<p>The Github GraphQL API provides a lot more capabilities than I can cover in one <em>snack</em>.</p>\n<p>However, in searching for a way to share the small lessons that I pick up week in week out, I knew that publishing through <a href=\"https://www.contentful.com/\">Contentful</a>, which it the CMS, I use for the main content in my blog site, was a little too much to share easily and quicly.\nPosting on Github and sharing that as <a href=\"https://gist.github.com/laudebugs\">gists</a> seemed like I would be writing too much for a gist that is supposed to be a short code snippet - which was the original title of this section. Although <a href=\"https://gist.github.com/MichaelCurrin/6777b91e6374cdb5662b64b8249070ea\">MichaelCurrin</a> proves me otherwise! His article is what got me goint in the first place!</p>\n<h2 id=\"querying-the-graphql-api-for-posts\">Querying the GraphQL API for posts.</h2>\n<p>In order to use the Github GraphQL API, you can either use the <a href=\"https://docs.github.com/en/graphql/overview/explorer\">API explorer</a> by logging in through your github account, use an api testing tool like <a href=\"https://support.insomnia.rest/article/61-graphql\">Insomnia</a>, or you can use it programmatically.</p>\n<p>Since I was using the Apollo Graph QL library to query my backend - that helps me manage comments and likes, I began to do a little research on how to query the Github GraphQL API. I will link the articles below.\nThis <a href=\"https://stackoverflow.com/questions/58576940/how-to-handle-authorization-header-with-apollo-graphql\">stack overflow</a> answered how to add an authorization header to an Apollo Client Query.</p>\n<h2 id=\"the-query\">The Query</h2>\n<p>We will be using writing our query in a node.js environment using both <a href=\"https://github.com/apollographql/apollo-client\">Apollo Client</a> and <a href=\"https://github.com/axios/axios\">Axios</a></p>\n<h3 id=\"1-obtain-your-github-public-access-token\">1. Obtain your github public access token</h3>\n<p>The only permission you need for this task is <code>public_repo</code> under <code>repo</code>:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> repo<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> public_repo</li>\n</ul>\n</li>\n</ul>\n<p>Give your token a name and will look something like this:</p>\n<pre><code class=\"language-txt\">89fdd35bcd40787b519e97462cec0f9975a66a58\n</code></pre>\n<p>Note the token above is revoked and you&#39;ll need to generate yours. Once you&#39;re done, we&#39;re ready for the next step!</p>\n<h3 id=\"2-querying-the-repo\">2. Querying the repo</h3>\n<p>In my case, I will be looking for files in my repository called <code>articles</code>. If you&#39;d like to use your own repository, simply make note of your repository name.</p>\n<h3 id=\"using-the-apollo-client\">Using the Apollo Client</h3>\n<ol>\n<li><p>Install the Apollo client</p>\n<pre><code class=\"language-bash\">npm install @apollo/client graphql\n</code></pre>\n</li>\n<li><p>Working in your js file, import the Apollo client and a few methods that we will make use of:</p>\n<pre><code class=\"language-js\">import { ApolloClient, InMemoryCache, gql, ApolloLink, HttpLink } from &#39;@apollo/client&#39;\n</code></pre>\n</li>\n<li><p>Initialize a new apollo client with the github graphQL endpoint and your token</p>\n<pre><code class=\"language-js\">const token = &#39;89fdd35bcd40787b519e97462cec0f9975a66a58&#39;\n\nconst endpoint = &#39;https://api.github.com/graphql&#39;\n\n// Add the toke to the header of your client for all your requests\nconst githubLClient = new ApolloClient({\n  uri: endpoint,\n  headers: {\n    authorization: `Bearer ${token}`\n  },\n  cache: new InMemoryCache({\n    addTypename: false\n  })\n})\n</code></pre>\n</li>\n<li><p>Make the query\nI referenced github user <a href=\"https://gist.github.com/int128/b0e75e3043c8a33808cea0089d988ed3\">int128&#39;s gist</a> for the structure of the graphQl query:</p>\n<pre><code class=\"language-js\">let request = await githubClient.query({\n  query: gql`\n    {\n      repository(owner: &quot;laudebugs&quot;, name: &quot;articles&quot;) {\n        defaultBranchRef {\n          target {\n            ... on Commit {\n              file(path: &quot;/&quot;) {\n                type\n                object {\n                  ... on Tree {\n                    entries {\n                      name\n                      object {\n                        ... on Blob {\n                          text\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n})\n</code></pre>\n</li>\n<li><p>Parse your output to obtain the file&#39;s contents.\nBy making this same query on Github&#39;s GraphQL explorer, the data returned, which is essentially a json object, at the time of writing this, looks like this:</p>\n<pre><code class=\"language-json\">{\n  &quot;data&quot;: {\n    &quot;repository&quot;: {\n      &quot;defaultBranchRef&quot;: {\n        &quot;target&quot;: {\n          &quot;file&quot;: {\n            &quot;type&quot;: &quot;tree&quot;,\n            &quot;object&quot;: {\n              &quot;entries&quot;: [\n                {\n                  &quot;name&quot;: &quot;QraphQL.md&quot;,\n                  &quot;object&quot;: {\n                    &quot;text&quot;: &quot;# Exploring GraphQL\\n&quot;\n                  }\n                },\n                {\n                  &quot;name&quot;: &quot;README.md&quot;,\n                  &quot;object&quot;: {\n                    &quot;text&quot;: &quot;# Articles&quot;\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>So, if to obtain the entries, we would access them by:</p>\n<pre><code class=\"language-js\">let result = request.data.repository.defaultBranchRef.target.file.type.object.entries\n</code></pre>\n</li>\n</ol>\n<h4 id=\"using-axios\">Using Axios</h4>\n<ol>\n<li><p>Install the <a href=\"https://github.com/axios/axios\">axios npm package</a></p>\n<pre><code class=\"language-bash\">npm install axios\n</code></pre>\n</li>\n<li><p>Import exios into your node project:</p>\n<pre><code class=\"language-js\">import axios from &#39;axios&#39;\n</code></pre>\n</li>\n<li><p>initialize an authentication object and the query string that will be attatched to your request</p>\n<pre><code class=\"language-js\">// The Authorization in the header of the request\nconst oauth = { Authorization: &#39;bearer &#39; + token }\n\n// The Query String\nconst query = `\n        {\n          repository(owner: &quot;laudebugs&quot;, name: &quot;articles&quot;) {\n            defaultBranchRef {\n              target {\n                ... on Commit {\n                  file(path: &quot;/&quot;) {\n                    type\n                    object {\n                      ... on Tree {\n                        entries {\n                          name\n                          object {\n                            ... on Blob {\n                              text\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n</code></pre>\n</li>\n<li><p>Make the request, adding in the query and the header</p>\n<pre><code class=\"language-js\">let request = axios.post(githubUrl, { query: query }, { headers: oauth })\n</code></pre>\n</li>\n<li><p>Parse your output as above:</p>\n<pre><code class=\"language-js\">let result = request.data.repository.defaultBranchRef.target.file.type.object.entries\n</code></pre>\n</li>\n</ol>\n<h2 id=\"referenced-articles\">Referenced articles</h2>\n<ul>\n<li><a href=\"https://gist.github.com/MichaelCurrin/6777b91e6374cdb5662b64b8249070ea\">Graph QL query</a> for getting files.</li>\n<li><a href=\"https://support.insomnia.rest/article/61-graphql\">GraphQL Queries using Insomnia</a></li>\n<li>How to create a personal access token from your github account: <a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\">Creating a personal access token</a></li>\n<li><a href=\"https://medium.com/risan/set-authorization-header-with-apollo-client-e934e6517ccf\">Set Authorization Header with Apollo Client</a></li>\n<li><a href=\"https://stackoverflow.com/questions/58576940/how-to-handle-authorization-header-with-apollo-graphql\">How to handle authorization header with apollo graphql? - Stack Overflow</a></li>\n<li><a href=\"https://dev.to/thomasaudo/get-started-with-github-grapql-api--1g8b\">Get started with GitHub GraphQL API 👨‍🔬</a> on Dev</li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/using-your-github-repository-as-a-database.webp\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/using-your-github-repository-as-a-database.webp\"/>\n                    \n                    \n\n            </item>\n            \n            <item>\n                <title>How To: Build an Express GraphQL API in TypeScript</title>\n                <link>https://www.laudebugs.me/dev/build-graphql-api-in-typescript</link>\n                <pubDate>2021-02-23T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/build-graphql-api-in-typescript</guid>\n                <description>\n                    <![CDATA[ Learn how to build a Node.js GraphQL API with Express and TypeScript]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <Aside>\nSo you wanna write a node GraphQL backend in TypeScript? Well, Let's put all the pieces together and begin.\n</Aside>\n\n<h2 id=\"initilizing-the-project\">Initilizing the project</h2>\n<p>We&#39;ll be working in a terminal - be it the standalone teminal - or the integrated terminal in your text editor.</p>\n<ol>\n<li><p>Initialize a repository in an empty folder, say, we call ours <code>express-gql-api</code>.:</p>\n<pre><code class=\"language-bash\">mkdir express-gql-api\n\n# enter the project folder\ncd express-gql-api\n</code></pre>\n</li>\n<li><p>Initialize the folder as a node and git project:</p>\n<pre><code class=\"language-bash\">npm init -y\n\ngit init\n</code></pre>\n</li>\n<li><p>Initialize a Readme\nHaving a Readme is essential for any project - this is the document people will see when they come across your repository in Github.</p>\n<br />\nWe'll start off with a simple description but feel free to add more information about your project as you go. ```bash echo '# Express GraphQLAPI\nin TypeScript' > Readme.md ```</li>\n<li><p>Initalize the source directory\nThis is where we will place our <code>.ts</code> files</p>\n<pre><code class=\"language-bash\">mkdir src\n</code></pre>\n</li>\n</ol>\n<h2 id=\"typescript-and-project-setup\">TypeScript and Project SetUp</h2>\n<p>TypeScript is usually compiled to JavaScript and which is the code that is actually run.\nAssuming you already have the <a href=\"https://www.typescriptlang.org/id/download\">TypeScript</a> installed, we will write the configuration file that tells the TypeScript compiler how to compile out files into JavaScript:</p>\n<ol>\n<li><p>Initialize a <code>tsconfig.json</code> file in your root directory from the terminal</p>\n<pre><code class=\"language-bash\">tsc --init\n</code></pre>\n</li>\n<li><p>. Working in the text editor, we will set the following compiler options:</p>\n<ol>\n<li><p><code>&quot;rootDir&quot;</code> - this is the directory where the TypeScript compiler will search for <code>.ts</code> files to compile into JavaScript. In our case, the root directory is the <code>src</code> folder:</p>\n<pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    //...\n    &quot;rootDir&quot;: &quot;./src&quot;\n    //...\n  }\n}\n</code></pre>\n</li>\n<li><p><code>&quot;outDir&quot;</code> - this is the directory where the compiled JavaScript will be placed:\nIn our case, we will call our output directory <code>&quot;dist&quot;</code></p>\n<pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    //...\n    &quot;rootDir&quot;: &quot;./src&quot;,\n    &quot;ourDir&quot;: &quot;./dist&quot;\n    //...\n  }\n}\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>Finally, we will edit the package.json file so that we have a smooth time running the project. Add the following line under script in <code>package.json</code>:</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;:{\n  //...\n   &quot;start&quot; : &quot;nodemon dist/index.js&quot;,\n   //...\n}\n</code></pre>\n</li>\n</ol>\n<p>This is the basic setup that we need before we get started</p>\n<h2 id=\"setup\">SetUp</h2>\n<p>We will be working with a few packages that we need to install:</p>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/express\"><code>express</code></a> - since we are buiding an express server</li>\n<li><a href=\"https://www.npmjs.com/package/express-graphql\"><code>express-graphql</code></a> - this is the express middleware that will allow us to build our graphQL endpoint</li>\n<li><a href=\"https://github.com/ardatan/graphql-tools#readme\"><code>graphql-tools</code></a> - A package that helps build the GraphQL Schema</li>\n<li><a href=\"https://www.npmjs.com/package/mongoose\"><code>mongoose</code></a> - The library that will allow us to connect to a MongoDB database</li>\n</ol>\n<p>Before we jump right into installing the packages, let&#39;s create a <code>.gitignore</code> file at the root folder and add <code>node_modules</code> so that git doesn&#39;t track npm packages:</p>\n<pre><code class=\"language-bash\">echo node_modules &gt; .gitignore\n</code></pre>\n<p>To install all the tools, we can do so in one command:</p>\n<pre><code class=\"language-bash\">npm install -s express express-graphql graphql-tools mongoose nodemon\n</code></pre>\n<p>Before we start writing some code, we need to have our TypeScript compiler running so that we can generate the JavaScript files as we go. So, in a separate window, run the typescript compiler with a watch flag:</p>\n<pre><code class=\"language-bash\">tsc -w\n</code></pre>\n<p>And now we are ready to build our api</p>\n<h2 id=\"the-api-🥑\">The API 🥑</h2>\n<p>Let&#39;s add some files to our file structure first:</p>\n<pre><code>📦express-gql-api\n┣ 📂src\n┣ 📜.gitignore\n┣ 📜Readme.md\n┣ 📜package.json\n┗ 📜tsconfig.json\n</code></pre>\n<p>However, let&#39;s add some files in the <code>src</code> folder first\nCreate an empty directory in the <code>src</code> folder called <code>data</code> - this is where we willl be placing out database connectors, types, schemas and resolver files.\nCreate the following files to match the following structure:</p>\n<pre><code>📦express-gql-api\n┣ 📂src\n┃ ┣ 📂data\n┃ ┃ ┣ 📜db.ts\n┃ ┃ ┣ 📜resolvers.ts\n┃ ┃ ┣ 📜schema.ts\n┃ ┃ ┗ 📜types.ts\n┃ ┗ 📜index.ts\n┣ 📜Readme.md\n┣ 📜package.json\n┗ 📜tsconfig.json\n</code></pre>\n<h3 id=\"schema-definition\">Schema Definition</h3>\n<p>GraphQL requires a schema to be defined. A schema what graphQL uses to know what type of data to expect.</p>\n<br />\nWe will define the schema in the `schema.ts` file in the following way: We will use our graphQL endpoint to create and query a user. So we need\nto define:\n\n<ul>\n<li><p>a <code>user</code> type</p>\n</li>\n<li><p>a <code>UserInput</code> input - that has the same structure as the <code>User</code> type</p>\n</li>\n<li><p>a <code>Query</code> type - where we will define all the queries</p>\n</li>\n<li><p>a <code>Mutation</code> type - where we will define the mutations</p>\n<pre><code class=\"language-ts\">import { resolvers } from &#39;./resolvers&#39;\nimport { makeExecutableSchema } from &#39;graphql-tools&#39;\n\nconst typeDefs = `\n    type User {\n      name: String\n      username: String\n    }\n    input UserInput {\n      name: String\n      username: String\n    }\n    type Query {\n      getUser(username: String): User\n    }\n    type Mutation{\n      createUser(user: UserInput): User\n    }\n  `\n// Build the schema and export\nconst schema = makeExecutableSchema({ typeDefs, resolvers })\nexport { schema }\n</code></pre>\n</li>\n</ul>\n<h3 id=\"definine-the-type---typets\">Definine the type - <code>type.ts</code></h3>\n<pre><code class=\"language-ts\">export class UserType {\n  constructor(public name: String, public username: String) {}\n}\n</code></pre>\n<h3 id=\"connecting-the-database\">Connecting the Database</h3>\n<h4 id=\"setting-up-the-mongodb-instance-🗄️\">Setting up the MongoDB instance 🗄️</h4>\n<p>Before we move into this step, we will need to first set up our database. One can do so by following this process:</p>\n<ol>\n<li>create a free MongoDB account <a href=\"https://account.mongodb.com/account/login\">here</a></li>\n<li>Create a <strong>free</strong> cluster.</li>\n<li>Once the cluster has been created, click <code>connect</code> to your cluster. Further instructions can be found <a href=\"https://docs.atlas.mongodb.com/connect-to-cluster/\">here</a></li>\n<li>You will need to add a connection IP address - typically your own IP for development locally</li>\n<li>create a database user with a username and password - You will need this to login to your database later</li>\n<li>Proceed to choosing a connection method - in our case we will use the <code>connect your application</code> option</li>\n<li>This will lead us to a page to select our driver and version - which in our case should be <code>Node.js</code> Version <code>3.6 or later</code>.</li>\n<li>Copy your connection string somewhere safe that you can edit. You will notice that the username is included in the connection string but you will need to replace the <code>&lt;password&gt;</code> with your password and also pick a name for our database\n{&#39; &#39;}<br />\nAssuming our username was `amani` with password `AEDPfTeq61WH04NL`, and we want our database to be called `bliss`, our connection string would\nlook like:</li>\n</ol>\n<pre><code class=\"language-txt\">mongodb+srv://amani:AEDPfTeq61WH04NL@cluster0.9ntf0.mongodb.net/bliss?retryWrites=true&amp;w=majority\n</code></pre>\n<ol start=\"9\">\n<li>Save this connection string somewhere where you can reference it later as we will need it when running our program.</li>\n</ol>\n<h4 id=\"connecting-to-the-database-programmatically---dbts\">Connecting to the Database programmatically - <code>db.ts</code></h4>\n<p>In the <code>db.js</code> file, we will import <code>mongoose</code> and then define a new schema for the database - in our case, the only schema we will need is the user schema.</p>\n<br />\nWe will then create a new mongoose model that will be exported for use to query the database. Notice that we have set the `connectionString`\nvariable to an environment variable - this is safer than pasting the connection string right into your code because it makes your database vulnerable.\nIn our case, will set the connection string to an environment varible when we are ready to run the application.\n\n<pre><code class=\"language-ts\">import mongoose from &#39;mongoose&#39;\nconst Schema = mongoose.Schema\n\n// @ts-ignore\nconst connectionString: String = process.env.MONGO_DB\n// @ts-ignore\nmongoose.connect(connectionString, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false,\n  useCreateIndex: true\n})\n\nconst UserSchema = new Schema({\n  name: String,\n  username: String\n})\n\nconst User = mongoose.model(&#39;User&#39;, UserSchema)\n\nexport { User }\n</code></pre>\n<h3 id=\"declaring-the-resolvers---resolversts\">Declaring the resolvers - <code>resolvers.ts</code></h3>\n<p>The resolvers are the functions that are run whenever the endpoint is run - so you need to define a function for each query and mutation as we will do below:</p>\n<pre><code class=\"language-ts\">import { UserType } from &#39;./types&#39;\n\n// import the User from the database\nimport { User } from &#39;./db&#39;\n\nexport const resolvers = {\n  Query: {\n    //@ts-ignore\n    getUser: (root, { username }) =&gt; {\n      return User.findOne({ username: username })\n        .then((user: UserType) =&gt; {\n          return user\n        })\n        .catch((error: any) =&gt; {\n          console.log(error.message)\n        })\n    }\n  },\n  Mutation: {\n    // @ts-ignore\n    createUser: async (root, { user }) =&gt; {\n      const newUser = new User({ name: user.name, username: user.username })\n      await newUser.save()\n      return newUser\n    }\n  }\n}\n</code></pre>\n<h2 id=\"piece-the-pie-together-🥧---indexts\">Piece the pie together 🥧 - <code>index.ts</code></h2>\n<p>Our <code>index.ts</code> file is where all the majic happens. We will begin by importing the necessary packages and instantiating a new express app. Then we will initialize the connection to the database and attach the <code>grapqlHTTP</code> middleware function with our schema and <code>graphiql</code> - which we can use to explore the api:</p>\n<pre><code class=\"language-ts\">import express from &#39;express&#39;\nimport { graphqlHTTP } from &#39;express-graphql&#39;\nimport { schema } from &#39;./data/schema&#39;\n\n// Initialize app\nconst app = express()\nrequire(&#39;./data/db&#39;)\n\n// the graphQL endpoint at /graphql.\napp.use(&#39;/graphql&#39;, graphqlHTTP({ schema: schema, graphiql: true }))\n\napp.get(&#39;*&#39;, (req, res) =&gt; {\n  res.json({ message: &#39;Welcome to the api&#39; })\n})\n\nconst PORT = 7000\napp.listen(PORT, () =&gt; {\n  console.log(`api is running on port ${PORT}`)\n})\n</code></pre>\n<h2 id=\"running-the-server\">Running the server</h2>\n<p>Before we run the server, we will need to add our mongoDB connection string to the environment variables:</p>\n<pre><code class=\"language-bash\">  export MONGO_DB=&#39;mongodb+srv://amani:AEDPfTeq61WH04NL@cluster0.9ntf0.mongodb.net/bliss?retryWrites=true&amp;w=majority&#39;\n</code></pre>\n<p>Now, we are ready to run the server 🚀</p>\n<pre><code class=\"language-bash\">  npm run start\n</code></pre>\n<p>And we can run the server and explore our api.\nHere&#39;s an example of a mutation that you can make with the api:</p>\n<h3 id=\"mutation\">Mutation</h3>\n<p>We can add a user by making a mutation on the api:</p>\n<pre><code class=\"language-txt\">  mutation createUser ($input:UserInput){\n    createUser(user:$input) {\n      name\n      username\n    }\n  }\n</code></pre>\n<p>We can then pass in the user input using the query variables:</p>\n<pre><code class=\"language-txt\">  {\n    &quot;input&quot;: {\n      &quot;name&quot;: &quot;Laurence&quot;,\n      &quot;username&quot;: &quot;laudebugs&quot;\n    }\n  }\n</code></pre>\n<p>Here&#39;s how the mutation looks like:</p>\n<p>&lt;img src={&#39;<a href=\"https://raw.githubusercontent.com/laudebugs/articles/main/resources/graphqlmutation.png&#39;%7D\">https://raw.githubusercontent.com/laudebugs/articles/main/resources/graphqlmutation.png&#39;}</a> width={&#39;100%&#39;} /&gt;</p>\n<h3 id=\"query\">Query</h3>\n<p>If we were to then ask the api for a certain user, we can make the query by:</p>\n<pre><code class=\"language-txt\">  query {\n    getUser (username:&quot;laudebugs&quot;){\n      name\n    }\n  }\n</code></pre>\n<p>You can check out the <a href=\"https://github.com/laudebugs/express-gql-api\">repo here</a></p>\n<h3 id=\"common-issues-that-you-may-run-into\">Common Issues that you may run into:</h3>\n<ol>\n<li><strong>IP isn&#39;t whitelisted</strong>: If you&#39;re running into this issue, it may be the case that your ip address has changed and you need to add your current IP to be able to connect.</li>\n<li><strong>Could not find a declaration file for &#39;express&#39;</strong>\nInstall the declaratio file for <code>express</code>:</li>\n</ol>\n<pre><code class=\"language-bash\">    npm install --save-dev express\n</code></pre>\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n<li><a href=\"https://medium.com/atheros/graphql-quick-tip-how-to-pass-variables-into-a-mutation-in-graphiql-23ecff4add57\">GraphQL quick tip: How to pass variables in GraphiQL</a></li>\n</ul>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/build-graphql-api-in-typescript.jpg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/build-graphql-api-in-typescript.jpg\"/>\n                    \n                    \n\n            </item>\n            \n            <item>\n                <title>Kenya Web Project</title>\n                <link>https://www.laudebugs.me/dev/kenya-web-project</link>\n                <pubDate>2020-06-05T00:00:00.000Z</pubDate>\n                <author>Laurence B. Ininda</author>\n                <guid>https://www.laudebugs.me/dev/kenya-web-project</guid>\n                <description>\n                    <![CDATA[ Examining performance and data download sizes of Kenya's top 500 websites. Expecially in emerging markets, website developers need to build small and efficient web applications.]]>\n                </description>\n                <content:encoded>\n                    <![CDATA[ <h2 id=\"foreground\">Foreground</h2>\n<p>The internet is a vast “land” with plenty of room to create, share and find content. Internet usage in Kenya is increasing by the year. COVID-19 brought to the forefront, the importance of having an online presence. Companies like Amazon, that were internet-first, widened their market share of internet sales and became more relevant. Those companies that didn&#39;t have an online presence realized that they needed to adapt quickly to the times. Even people realized that they needed to build an online presence to showcase their work or seek jobs.</p>\n<p>In developing countries like Kenya, with companies shifting online, there is a growing need to track these trends. However, data is still expensive for the average Kenyan even though data consumption in the country has been increasing by the year. Therefor, in as much as companies are moving online, they need to take into consideration this very fact that accessing websites should not require a large amount of data – say more than 2MB (to be revised later). And web developers need to be creative in ways that they can reduce data consumption on subsequent website visits to the sites they build. For instance, through caching or giving users a low-data version of their site once they land on the page before loading any subsequent content.</p>\n<h2 id=\"conceptualization\">Conceptualization</h2>\n<p>Through this project, I would like to accomplish two things:</p>\n<ul>\n<li>Create a directory of Kenyan websites - websites with extensions “.co.ke” or “.ke” or that include “kenya” within the domain name.</li>\n<li>Of the collected sites, note how much data is downloaded on the landing page of the site and organize this data into a repository.</li>\n</ul>\n<h2 id=\"data-collection-and-preparation\">Data Collection and Preparation</h2>\n<p>How many websites can I find by randomly searching common words and the big companies in Kenya?</p>\n<p>After considering this, I searched the internet to try to find a difinitive list of websites in Kenya. To find this list, I would have to contact organizations like The Kenya Network Information Centre (KENIC) to obtain this information. And although this seemed like the route to go, I also found a list of the top 500 websites in Kenya provided by Alexa and figured that this list would be more useful to use as a baseline of websites in Kenya. And as the list showed, there&#39;s a large number of domains that do not end with .co.ke or .ke that Kenyans use. After signing up for the free trial, I parsed the data to this json file using a simple java script.</p>\n<p>Considering all the information that lighthouse provided, two metrics seemed important: the performance of the site as well as the amount of data downloaded when a user accesses the website., i.e. Total size.\nTwo metrics: Performance and total size downloaded on page load\nThe size will vary from device to device since mobile devices might have cached the websites before or CDN&#39;s might be used to deliver a faster and smaller payload.</p>\n<h3 id=\"why-lighthouse\">Why lighthouse?</h3>\n<p>Google provides Lighthouse as a developer tool to generate a report on a website. The tool is also available as a commandline interface tool. However, I wanted to use the tool as part of a node.js project. Therefore, I stumbled on this project by Sahava on github from which I borrowed heavily and modified to my own use.\nGenerating the Reports</p>\n<p>Since my computer crawled at even the thought of running lighthouse on 500 websites, I decided to run the runLightHouse.js script on AWS.\nHere are the steps for creating an AWS instance:\nAfter Creating an Amazon AWS account,\nCreate an EC2 instance. You can proceed with launching an instance that contains the free tier.</p>\n<pre><code>Launch instance &gt; Ubuntu 20.04 (with Free tier eligible) &gt; General Purpose Instance Type &gt; Choose an Existing Key-pair for ssh into your instance or download a new instance &gt;Launch instance\n</code></pre>\n<p>I however created an instance type with a GPU (just for fun) and to perform lighthouse processes fast. (this cost a couple of cents/hr)\nSSH into your instance:</p>\n<pre><code class=\"language-bash\"># move your .pem file into the come folder\n# Assuming you downloaded the .pem file to the downloads folder:\n# cd into the root directory\ncd\n# check whether a .ssh folder exists\nls -al\n# if it doesn&#39;t, create the folder\nmkdir .ssh\n#move the .pem file into the .ssh folder. Here assume I call my .pem file myKeyPair\nmv [path where the .pem file exists]/myKeyPair.pem myKeyPair.pem\n# change the permissions of the .pem file\nchmod 400 .ssh/myKeyPair.pem\n</code></pre>\n<p>Copy your Public DNS (IPv4) from your AWS instance - this is usually located at your instances page when you click on your instance</p>\n<p>SSH into your instance</p>\n<pre><code class=\"language-bash\"># replace [my public ip with the actual ip]\nssh -i ~/.ssh/myKeyPair.pem ubuntu@[Public DNS (IPv4)]\n# you may be asked whether to type yes or no to proceed. Type yes to proceed\n\n# Prepare the server to run your script\ninstall git\nsudo apt install git -y\n# Install latest version of npm\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash\nsudo apt-get install -y nodejs\n# Install Chrome. I referenced this article\n\n# Download Google chrome\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n# install google chrome\nsudo apt install ./google-chrome-stable_current_amd64.deb\n</code></pre>\n<h3 id=\"running-the-script\">Running the script</h3>\n<pre><code class=\"language-bash\"># Clone the repo\ngit clone https://github.com/laudebugs/kenya-web-project.git\n\n# enter project folder\ncd kenya-web-project\n\n# Install packages\nnpm install\n\n# Run the script\nnode generateReports.js\n# Exit the AWS instance\n</code></pre>\n<h2 id=\"update\">Update</h2>\n<p>I tried running the script on an amazon linux server but there was always an error generated, so I switched to using an ubuntu 20.04 instance.\nBelow are the instructions fro setting up and to ssh into an Amazon linux ec2 instance:\nAfter Creating an Amazon AWS account,\nCreate an EC2 instance. You can proceed with launching an instance that contains the free tier.</p>\n<pre><code class=\"language-text\">Launch instance &gt; Amazon Linux (with Free tier eligible) &gt; General Purpose Instance Type &gt; Choose an Existing Key-pair for ssh into your instance or download a new instance &gt;Launch instance\n</code></pre>\n<p>I however created an instance type with a GPU (just for fun) and to perform lighthouse processes fast. (this cost a couple of cents/hr)\nSSH into your instance:</p>\n<pre><code class=\"language-bash\"># move your .pem file into the come folder\n# Assuming you downloaded the .pem file to the downloads folder:\n# cd into the root directory\ncd [root directory]\n\n# check whether a .ssh folder exists\nls -al\n\n# if it doesn&#39;t, create the folder\nmkdir .ssh\n#move the .pem file into the .ssh folder. Here assume I call my .pem file myKeyPair\nmv [path where the .pem file exists]/myKeyPair.pem myKeyPair.pem\n\nChange the permissions of the .pem file\n```bash\nchmod 400 .ssh/myKeyPair.pem\n</code></pre>\n<p>Copy your Public DNS (IPv4) from your AWS instance - this is usually located at your instances page when you click on your instance</p>\n<pre><code>SSH into your instance\n```bash\n# replace [my public ip with the actual ip]\nssh -i ~/.ssh/myKeyPair.pem ec2-user@[Public DNS (IPv4)]\n</code></pre>\n<p>You may be asked whether to type yes or no to proceed. Type yes to proceed</p>\n<pre><code class=\"language-bash\"># Prepare the server to run your script\n# install git\nsudo yum install git -y\n</code></pre>\n<p>install npm using Amazon&#39;s instructions</p>\n<pre><code class=\"language-bash\"># Install latest version of npm\nnpm install -g npm@latest\n# Install Chrome. I referenced this article\ncurl https://intoli.com/install-google-chrome.sh | bash\n</code></pre>\n<h4 id=\"running-the-script-1\">Running the script</h4>\n<pre><code class=\"language-bash\">#Clone the repo\ngit clone https://github.com/laudebugs/kenya-web-project.git\n\n# enter project folder\n```bash\ncd kenya-web-project\n# Install packages\nnpm install\n# Exit the AWS instance\nexit\n</code></pre>\n<h2 id=\"analysis\">Analysis</h2>\n<p>Having obtained two additional metrics of each website, i.e. the performance and size of page downloaded, then we can plot several graphs to gauge how one metric affects the other.</p>\n<p>In order to answer questions that the data presented, there still remained missing pieces of information that would enable me to analyze the data accurately. With metrics such as performance, size of webpage downloaded and average time spent on a website, we could take a look at the general trend of the top websites in Kenya as shown below.</p>\n<p>&lt;img\n    alt=&quot;Size of the web page downloaded&quot;\n    src={\n        &#39;<a href=\"https://raw.githubusercontent.com/laudebugs/kenya-web-project/master/analysis/graphs/Size%20of%20the%20web%20page%20downloaded.png&#39;\">https://raw.githubusercontent.com/laudebugs/kenya-web-project/master/analysis/graphs/Size%20of%20the%20web%20page%20downloaded.png&#39;</a>\n    }\n    width={&#39;100%&#39;}\n/&gt;</p>\n<p>The optimal size of a web page is 0 - 1 MB downloaded once a use logs onto a site. This is of course, not taking into account cached resources that might reduce the size of the page downloaded.</p>\n<p>&lt;img\n    alt=&quot;TimeSpentOnWebsite&quot;\n    src={&#39;<a href=\"https://raw.githubusercontent.com/laudebugs/kenya-web-project/master/analysis/graphs/TimeSpentOnWebsite.png&#39;%7D\">https://raw.githubusercontent.com/laudebugs/kenya-web-project/master/analysis/graphs/TimeSpentOnWebsite.png&#39;}</a>\n    width={&#39;100%&#39;}\n/&gt;</p>\n<p>The modal time spent on a website by Kenyans is 3 minutes with the average coming to 7.2682 minutes.</p>\n<h2 id=\"postscript\">Postscript</h2>\n<p>In analyzing the dataset, there&#39;s a temptation to draw immediate conclusions from the various datapoints such as comparing the time spent and how this changes based on the size of the web page downloaded when a user accesses the website. However, this analysis doesn&#39;t take into account the fact that different websites serve different functions. For instance, a person logging into the Kenya Revenue Authority website would perhaps use the site for a specific predetermined use case while a person using YouTube might not have a goal in mind while using the site. And therefore one would need to make assumptions to immediately draw conclusions from the data. On modelling the graph, the size of the page downloaded doesn&#39;t relate to how much time is spent on the site.\nFurther information is needed to ask deeper questions from the dataset. One such piece is the genre of the website which would be able to draw distinctions between the different websites and make comparisons within websites of a certain type.\nAs of now, the dataset is freely available to use and for more research to be done. Especially at a time when the internet is crucial to keep systems moving during Covid-19, we need to examine more closely how Kenyans use the internet.\nHiccups along the way\nIn generating the lighthouse reports for the site, I decided to splice the list of websites into groups of 30 websites at a time - because even AWS servers weren&#39;t running all the reports smoothly. At other times, I ran 50 reports at a time. However, while doing this, I realised I skipped over close to 70 websites spread over my input set of 500. And so, I wrote a small python script to find the missing sites.\nI had to manually run the website Bet365.com using the lighthouse cli because the node script kept timing out</p>\n<h3 id=\"after-installing-lighthouse\">After installing lighthouse</h3>\n<p><code>npm install -g lighthouse</code></p>\n<pre><code class=\"language-bash\">lighthouse https://www.bet365.com/ --quiet --output json --output-path ./www_Bet365_com.json\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sahava/multisite-lighthouse\">Multisite Lighthouse</a></li>\n<li><a href=\"https://www.alexa.com/topsites/countries/KE\">Top Sites in Kenya</a></li>\n<li>Google Chrome Lighthouse <a href=\"https://github.com/GoogleChrome/lighthouse\">Github Repository</a></li>\n</ul>\n<p>-&gt; Checkout the <a href=\"https://github.com/laudebugs/kenya-web-project\">Github Repository</a></p>\n ]]>\n                </content:encoded>\n                <media:content height=\"720\" medium=\"image\" url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/kenya-web-project.jpeg\" width=\"1280\"/>\n                    <media:thumbnail url=\"https://raw.githubusercontent.com/laudebugs/blog-posts/main/assets/kenya-web-project.jpeg\"/>\n                    <media:credit>\n                                <![CDATA[ Photo by <a href=\"https://unsplash.com/@joecalih?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Joecalih</a> on <a href=\"https://unsplash.com/s/photos/nairobi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a> ]]>\n                                </media:credit>\n                    \n\n            </item>\n            \n        </channel>\n        </rss>",
    "json": "{}",
    "atom": "feed.atom1()"
}
